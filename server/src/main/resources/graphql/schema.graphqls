scalar DateTime

type User {
  id: ID!
  username: String!
  userList: [UserListEntry!]!
  userLists: [EmbeddedUserList]
  ratingSystems: [EmbeddedRatingSystem]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserListEntry {
  mediaID: Int!
  rated: Boolean!
  rating: Float!
}

input UserListEntryInput {
  mediaID: Int!
  rated: Boolean!
  rating: Float!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type RegisterResponse {
  success: Boolean!
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}

type LoginResponse {
  success: Boolean!
  token: String!
  user: User!
}

input MALOauthInput {
  code: String!
  state: String!
}

type Query {
  me: User
  malLinkOauth: String!
  malLoginOauth: String!
  getRatingSystem(ratingSystemID: String!): RatingSystem
  userList(listId: String!): UserList
}

type Mutation {
  register(input: RegisterInput!): RegisterResponse
  login(input: LoginInput!): LoginResponse
  malLogin(input: MALOauthInput!): LoginResponse
  logout: Boolean
  malLink(input: MALOauthInput!): Boolean
  addListEntry(input: UserListEntryInput!): Boolean
  updateUserListEntry(input: UserListEntryInput!): UserListEntry
  createRatingSystem(input: RatingSystemInput!): RatingSystem
  createUserList(input: CreateUserListInput!): UserList
  addUserListItem(input: AddUserListItemInput!): UserListItem
  updateUserListItem(input: UpdateUserListItemInput!): UserListItem
  updateUserList(input: UpdateUserListInput!): Boolean
}
